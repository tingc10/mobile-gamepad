{"version":3,"sources":["utils/socket.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["socket","io","query","type","keydownValue","RestartIcon","Bowser","getParser","window","navigator","userAgent","react_default","a","createElement","xmlns","width","height","viewBox","style","fill","d","App","isLandscape","_useState","useState","_useState2","Object","slicedToArray","showRestartButton","setShowRestartButton","_useState3","_useState4","status","setStatus","_useState5","Set","_useState6","activeInputs","setActiveInputs","_useState7","_useState8","clientId","setClientId","_useState9","_useState10","deviceOrientationInitialized","setDeviceOrientationInitialized","playerRef","useRef","handleOrientation","event","x","beta","y","gamma","console","log","current","emit","handleRestartClick","_initializeDeviceOrientationHandler","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","DeviceMotionEvent","requestPermission","sent","addEventListener","t0","stop","apply","this","arguments","innerHeight","innerWidth","useEffect","noSleep","NoSleep","e","has","delete","inputType","add","keyCode","on","data","message","playerNumber","document","userTapPermissions","removeEventListener","enable","className","onSubmit","preventDefault","name","onChange","target","value","onClick","initializeDeviceOrientationHandler","App_RestartIcon","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"gUAIaA,QAASC,GADF,0CACW,CAC7BC,MAAO,CACLC,KAAM,gBCANC,EAAe,EAWbC,GAVSC,IAAOC,UAAUC,OAAOC,UAAUC,WAU7B,WAClB,OACEC,EAAAC,EAAAC,cAAA,OACEC,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,QAAQ,YACRC,MAAO,CAAEC,KAAM,SAEfR,EAAAC,EAAAC,cAAA,QAAMO,EAAE,sbA0KCC,EArKO,WACpB,IAAIC,GAAc,EADQC,EAEwBC,oBAAS,GAFjCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEnBK,EAFmBH,EAAA,GAEAI,EAFAJ,EAAA,GAAAK,EAGEN,mBAC1B,gDAJwBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGnBE,EAHmBD,EAAA,GAGXE,EAHWF,EAAA,GAAAG,EAMcV,mBAAsB,IAAIW,KANxCC,EAAAV,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAMnBG,EANmBD,EAAA,GAMLE,EANKF,EAAA,GAAAG,EAOMf,mBAAS,IAPfgB,EAAAd,OAAAC,EAAA,EAAAD,CAAAa,EAAA,GAOnBE,EAPmBD,EAAA,GAOTE,EAPSF,EAAA,GAAAG,EAWtBnB,oBAAS,GAXaoB,EAAAlB,OAAAC,EAAA,EAAAD,CAAAiB,EAAA,GASxBE,EATwBD,EAAA,GAUxBE,EAVwBF,EAAA,GAYpBG,EAAYC,iBAAO,GAKzB,SAASC,EAAkBC,GACzB,IAAIC,EAAID,EAAME,MAAQ,EAClBC,EAAIH,EAAMI,OAAS,EACvBC,QAAQC,IAAIT,EAAUU,QAASN,EAAGE,GACR,IAAtBN,EAAUU,UACZN,IAAK,GAEPnD,EAAO0D,KAAK,2BAA4B,CAAEP,EAAGA,EAAI,GAAIE,EAAG,IA2E1D,SAASM,IACP9B,GAAqB,GACrB7B,EAAO0D,KAAK,eArGY,SAAAE,IAAA,OAAAA,EAAAlC,OAAAmC,EAAA,EAAAnC,CAAAoC,EAAAlD,EAAAmD,KAsH1B,SAAAC,IAAA,OAAAF,EAAAlD,EAAAqD,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAC4D,oBAA/C5D,OAAO6D,kBAAkBC,kBADtC,CAAAJ,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAG6B5D,OAAO6D,kBAAkBC,oBAHtD,OAIuB,YAJvBJ,EAAAK,KAKQ/D,OAAOgE,iBAAiB,oBAAqBvB,GAE7CM,QAAQC,IAAI,yCAPpBU,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,SAUMX,QAAQC,IAARU,EAAAO,IAVN,QAAAP,EAAAE,KAAA,iBAaI5D,OAAOgE,iBAAiB,oBAAqBvB,GAbjD,yBAAAiB,EAAAQ,SAAAV,EAAA,kBAtH0BW,MAAAC,KAAAC,WA8I1B,OAjIIrE,OAAOsE,YAActE,OAAOuE,aAC9BzD,GAAc,GAahB0D,oBAAU,WACR,IAAMC,EAAU,IAAIC,IACpB1E,OAAOgE,iBAAiB,QAAS,SAAAW,GAC3B9C,EAAa+C,IAAI,aACnB/C,EAAagD,OAAO,WACpBrF,EAAO0D,KAAK,oBAAqB,CAAE4B,UAAW,YAC9ChD,EAAgBD,MAIpB7B,OAAOgE,iBAAiB,UAAW,SAAAW,GAC5B9C,EAAa+C,IAAI,aACpB/C,EAAakD,IAAI,WACjBvF,EAAO0D,KAAK,iBAAkB,CAAE4B,UAAW,YAC3ChD,EAAgBD,IAGA,KAAd8C,EAAEK,SACApF,EAAe,IACjBA,EAAe,GAEbA,EAAe,IACjBA,KAEqB,KAAd+E,EAAEK,UACPpF,EAAe,IACjBA,EAAe,GAEbA,GAAgB,IAClBA,KAGJJ,EAAO0D,KAAK,2BAA4B,CAAEP,EAAG/C,EAAciD,EAAG,MAGhErD,EAAOyF,GAAG,sBAAuB,SAACC,GAChCzD,EAAUyD,EAAKC,WAGjB3F,EAAOyF,GAAG,wBAAyB,SAACC,GAClC3C,EAAUU,QAAUiC,EAAKE,aACzB3D,EAAU,0BAGZjC,EAAOyF,GAAG,cAAe,WACvB5D,GAAqB,KAGvB7B,EAAOyF,GAAG,WAAY,WACpB5D,GAAqB,KAGvBgE,SAASrB,iBACP,QACA,SAASsB,IACPD,SAASE,oBAAoB,QAASD,GAAoB,GAE1Db,EAAQe,WAEV,IAED,IAuDDrF,EAAAC,EAAAC,cAAA,OAAKoF,UAAU,OACbtF,EAAAC,EAAAC,cAAA,QAAMoF,UAAU,iBAAiBC,SAtDrC,SAAsBf,GACpBA,EAAEgB,iBACFnG,EAAO0D,KAAK,wBAAyBjB,KAqDjC9B,EAAAC,EAAAC,cAAA,SACEoF,UAAU,kBACVG,KAAK,WACLC,SArDR,SAA8BlB,GAC5BzC,EAAYyC,EAAEmB,OAAOC,QAqDfA,MAAO9D,IAET9B,EAAAC,EAAAC,cAAA,SACEoF,UAAU,uBACVO,QAlBR,WACO3D,IAxImB,WAAAe,EAAAe,MAAAC,KAAAC,WAyItB4B,GACA3D,GAAgC,KAgB5B3C,KAAK,SACLoG,MAAM,mBAGTvE,GACCV,GAAeX,EAAAC,EAAAC,cAAA,uCAtDfe,EAEAjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQoF,UAAU,iBAAiBO,QAAS7C,GAC1ChD,EAAAC,EAAAC,cAAC6F,EAAD,MACA/F,EAAAC,EAAAC,cAAA,2BAKD,OCtIS8F,QACW,cAA7BnG,OAAOoG,SAASC,UAEe,UAA7BrG,OAAOoG,SAASC,UAEhBrG,OAAOoG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrG,EAAAC,EAAAC,cAACoG,EAAD,MAASpB,SAASqB,eAAe,SDmI3C,kBAAmBzG,WACrBA,UAAU0G,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d6342310.chunk.js","sourcesContent":["import io from 'socket.io-client';\n\nconst isProd = process.env.NODE_ENV === 'production';\nconst host = true ? 'https://young-gorge-52676.herokuapp.com' : 'http://localhost:52300';\nexport const socket = io(host, {\n  query: {\n    type: 'controller'\n  }\n});\n","import React, { useState, useEffect, useRef } from \"react\";\nimport NoSleep from \"nosleep.js\";\nimport Bowser from \"bowser\";\nimport \"./App.css\";\nimport { socket } from \"./utils/socket\";\n\nlet keydownValue = 0;\nconst parser = Bowser.getParser(window.navigator.userAgent);\n\ndeclare global {\n  interface Window {\n    DeviceMotionEvent: DeviceMotionEvent & {\n      requestPermission?: () => Promise<string>;\n    };\n  }\n}\n\nconst RestartIcon = () => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"26\"\n      height=\"26\"\n      viewBox=\"0 0 26 26\"\n      style={{ fill: \"#fff\" }}\n    >\n      <path d=\"M 10 0 L 0 2 L 3.03125 5.03125 C 1.273438 7.222656 0.1875 9.972656 0.1875 13 C 0.1875 20.074219 5.921875 25.8125 13 25.8125 C 20.078125 25.8125 25.8125 20.074219 25.8125 13 C 25.8125 7.695313 22.59375 3.132813 18 1.1875 L 18 4.28125 C 21.027344 6.019531 23.0625 9.261719 23.0625 13 C 23.0625 18.5625 18.5625 23.0625 13 23.0625 C 7.4375 23.0625 2.9375 18.5625 2.9375 13 C 2.9375 10.726563 3.695313 8.652344 4.96875 6.96875 L 8 10 Z\"></path>\n    </svg>\n  );\n};\n\nconst App: React.FC = () => {\n  let isLandscape = true;\n  const [showRestartButton, setShowRestartButton] = useState(false);\n  const [status, setStatus] = useState(\n    \"Please enter the clientId to pair controller\"\n  );\n  const [activeInputs, setActiveInputs] = useState<Set<string>>(new Set());\n  const [clientId, setClientId] = useState(\"\");\n  const [\n    deviceOrientationInitialized,\n    setDeviceOrientationInitialized\n  ] = useState(false);\n  const playerRef = useRef(1);\n  if (window.innerHeight > window.innerWidth) {\n    isLandscape = false;\n  }\n\n  function handleOrientation(event: DeviceOrientationEvent) {\n    let x = event.beta || 0; // In degree in the range [-180,180]\n    let y = event.gamma || 0; // In degree in the range [-90,90]\n    console.log(playerRef.current, x, y);\n    if (playerRef.current === 2) {\n      x = -1 * x;\n    }\n    socket.emit(\"deviceOrientationChanged\", { x: x / 20, y: 0 });\n  }\n\n  useEffect(() => {\n    const noSleep = new NoSleep();\n    window.addEventListener(\"keyup\", e => {\n      if (activeInputs.has(\"keydown\")) {\n        activeInputs.delete(\"keydown\");\n        socket.emit(\"deleteActiveInput\", { inputType: \"keydown\" });\n        setActiveInputs(activeInputs);\n      }\n    });\n\n    window.addEventListener(\"keydown\", e => {\n      if (!activeInputs.has(\"keydown\")) {\n        activeInputs.add(\"keydown\");\n        socket.emit(\"newActiveInput\", { inputType: \"keydown\" });\n        setActiveInputs(activeInputs);\n      }\n\n      if (e.keyCode === 39) {\n        if (keydownValue < 0) {\n          keydownValue = 0;\n        }\n        if (keydownValue < 50) {\n          keydownValue++;\n        }\n      } else if (e.keyCode === 37) {\n        if (keydownValue > 0) {\n          keydownValue = 0;\n        }\n        if (keydownValue > -50) {\n          keydownValue--;\n        }\n      }\n      socket.emit(\"deviceOrientationChanged\", { x: keydownValue, y: 0 });\n    });\n\n    socket.on(\"controllerPairError\", (data: { message: string }) => {\n      setStatus(data.message);\n    });\n\n    socket.on(\"controllerPairSuccess\", (data: { playerNumber: number }) => {\n      playerRef.current = data.playerNumber;\n      setStatus(\"Controller Connected\");\n    });\n\n    socket.on(\"restartGame\", () => {\n      setShowRestartButton(false);\n    });\n\n    socket.on(\"gameOver\", () => {\n      setShowRestartButton(true);\n    });\n\n    document.addEventListener(\n      \"click\",\n      function userTapPermissions() {\n        document.removeEventListener(\"click\", userTapPermissions, false);\n        // This prevents the phone from going to sleep\n        noSleep.enable();\n      },\n      false\n    );\n  }, []);\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    socket.emit(\"setAssociatedClientId\", clientId);\n  }\n\n  function handleChangeClientId(e: React.ChangeEvent<HTMLInputElement>) {\n    setClientId(e.target.value);\n  }\n\n  function handleRestartClick() {\n    setShowRestartButton(false);\n    socket.emit(\"restartGame\");\n  }\n\n  function renderRestartButton() {\n    if (showRestartButton) {\n      return (\n        <div>\n          <button className=\"restart-button\" onClick={handleRestartClick}>\n            <RestartIcon />\n            <p>Restart Game</p>\n          </button>\n        </div>\n      );\n    }\n    return null;\n  }\n\n  async function initializeDeviceOrientationHandler() {\n    if (typeof window.DeviceMotionEvent.requestPermission === \"function\") {\n      try {\n        const response = await window.DeviceMotionEvent.requestPermission();\n        if (response === \"granted\") {\n          window.addEventListener(\"deviceorientation\", handleOrientation);\n        } else {\n          console.log(\"DeviceMotion permissions not granted.\");\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    } else {\n      window.addEventListener(\"deviceorientation\", handleOrientation);\n    }\n  }\n\n  function handleClickSubmit() {\n    if (!deviceOrientationInitialized) {\n      initializeDeviceOrientationHandler();\n      setDeviceOrientationInitialized(true);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <form className=\"client-id-form\" onSubmit={handleSubmit}>\n        <input\n          className=\"client-id-input\"\n          name=\"clientId\"\n          onChange={handleChangeClientId}\n          value={clientId}\n        />\n        <input\n          className=\"client-submit-button\"\n          onClick={handleClickSubmit}\n          type=\"submit\"\n          value=\"Set Client Id\"\n        />\n      </form>\n      {status}\n      {!isLandscape && <div>Please turn your device!</div>}\n      {renderRestartButton()}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}