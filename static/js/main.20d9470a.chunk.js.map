{"version":3,"sources":["utils/socket.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["socket","io","query","type","keydownValue","App","Bowser","getParser","window","navigator","userAgent","isLandscape","_useState","useState","setOrientation","Object","slicedToArray","_useState3","_useState4","showRestartButton","setShowRestartButton","_useState5","_useState6","status","setStatus","_useState7","Set","_useState8","activeInputs","setActiveInputs","_useState9","_useState10","clientId","setClientId","_useState11","_useState12","deviceOrientationInitialized","setDeviceOrientationInitialized","handleOrientation","event","x","beta","y","gamma","emit","handleRestartClick","_initializeDeviceOrientationHandler","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","DeviceMotionEvent","requestPermission","sent","addEventListener","console","log","t0","stop","apply","this","arguments","innerHeight","innerWidth","useEffect","noSleep","NoSleep","e","has","delete","inputType","add","keyCode","on","data","message","document","userTapPermissions","removeEventListener","enable","react_default","createElement","className","onSubmit","preventDefault","name","onChange","target","value","onClick","initializeDeviceOrientationHandler","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.20d9470a.chunk.js","sourcesContent":["import io from 'socket.io-client';\n\nconst isProd = process.env.NODE_ENV === 'production';\nconst host = isProd ? 'https://young-gorge-52676.herokuapp.com' : 'http://localhost:52300';\nexport const socket = io(host, {\n  query: {\n    type: 'controller'\n  }\n});\n","import React, { useState, useEffect } from 'react';\nimport NoSleep from 'nosleep.js';\nimport Bowser from 'bowser';\n// import {socket} from './utils/socket';\nimport './App.css';\nimport { socket } from './utils/socket';\n\nlet keydownValue = 0;\nconst parser = Bowser.getParser(window.navigator.userAgent);\n\ndeclare global {\n  interface Window {\n    DeviceMotionEvent: DeviceMotionEvent & {\n      requestPermission?: () => Promise<string>;\n    }\n  }\n}\n\nconst App: React.FC = () => {\n  let isLandscape = true;\n  const [, setOrientation] = useState();\n  const [showRestartButton, setShowRestartButton] = useState(false);\n  const [status, setStatus] = useState('Please enter the clientId to pair controller');\n  const [activeInputs, setActiveInputs] = useState<Set<string>>(new Set());\n  const [clientId, setClientId] = useState('');\n  const [deviceOrientationInitialized, setDeviceOrientationInitialized] = useState(false);\n  if(window.innerHeight > window.innerWidth) {\n      isLandscape = false;\n  }\n\n  function handleOrientation(event: DeviceOrientationEvent) {\n    let x = event.beta || 0;  // In degree in the range [-180,180]\n    let y = event.gamma || 0; // In degree in the range [-90,90]\n    setOrientation([x, y]);\n    socket.emit('deviceOrientationChanged', { x: ( x / 20 ), y: 0 });\n  }\n  useEffect(() => {\n    const noSleep = new NoSleep();\n    window.addEventListener('keyup', (e) => {\n      if (activeInputs.has('keydown')) {\n        activeInputs.delete('keydown');\n        socket.emit('deleteActiveInput', { inputType: 'keydown' });\n        setActiveInputs(activeInputs);\n      }\n    });\n\n    window.addEventListener('keydown', (e) => {\n      if (!activeInputs.has('keydown')) {\n        activeInputs.add('keydown');\n        socket.emit('newActiveInput', { inputType: 'keydown' });\n        setActiveInputs(activeInputs);\n      }\n\n      if (e.keyCode === 39) {\n        if (keydownValue < 0) {\n          keydownValue = 0;\n        }\n        if (keydownValue < 50) {\n          keydownValue++;\n        }\n      } else if(e.keyCode === 37) {\n        if (keydownValue > 0) {\n          keydownValue = 0;\n        }\n        if (keydownValue > -50) {\n          keydownValue--;\n\n        }\n      }\n      socket.emit('deviceOrientationChanged', { x: keydownValue, y: 0 });\n    });\n\n    socket.on('controllerPairError', (data: { message: string }) => {\n      setStatus(data.message);\n    });\n\n    socket.on('controllerPairSuccess', (data: { message: string }) => {\n      setStatus('Controller Connected');\n    });\n\n    socket.on('restartGame', () => {\n      setShowRestartButton(false);\n    });\n\n    socket.on('gameOver', () => {\n      setShowRestartButton(true);\n    });\n\n    document.addEventListener('click', function userTapPermissions() {\n      document.removeEventListener('click', userTapPermissions, false);\n      // This prevents the phone from going to sleep\n      noSleep.enable();\n    }, false);\n  }, []);\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    socket.emit('setAssociatedClientId', clientId);\n  }\n\n  function handleChangeClientId(e: React.ChangeEvent<HTMLInputElement>) {\n    setClientId(e.target.value);\n  }\n\n  function handleRestartClick() {\n    setShowRestartButton(false);\n    socket.emit('restartGame');\n  }\n\n  function renderRestartButton() {\n    if (showRestartButton) {\n      return <div><button onClick={handleRestartClick}>Restart Game</button></div>;\n    }\n    return null;\n  }\n\n  async function initializeDeviceOrientationHandler() {\n    if (typeof window.DeviceMotionEvent.requestPermission === 'function') {\n      try {\n        const response = await window.DeviceMotionEvent.requestPermission()\n        if (response === 'granted') {\n          window.addEventListener('deviceorientation', handleOrientation);\n        } else {\n          console.log('DeviceMotion permissions not granted.')\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    } else {\n      window.addEventListener('deviceorientation', handleOrientation);\n    }\n  }\n\n  function handleClickSubmit() {\n    if (!deviceOrientationInitialized) {\n      initializeDeviceOrientationHandler();\n      setDeviceOrientationInitialized(true);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={handleSubmit}>\n        <input name=\"clientId\" onChange={handleChangeClientId} value={clientId}/>\n        <input onClick={handleClickSubmit} type=\"submit\" value=\"Set Player Id\" />\n      </form>\n      { status }\n      { !isLandscape && <div>Please turn your device!</div>}\n      {renderRestartButton()}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}